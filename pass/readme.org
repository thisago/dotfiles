#+title: Pass
#+auto_tangle: yes

* Manual Setup

To use =pass= securely, you need to generate a dedicated GPG key for encryption with Ed25519 for signing and Curve25519 for encryption.

** Generating GPG key
Use the script below to fully generate with this configuration:
*** GPG Key Config
#+begin_src text :tangle gpg-batch.txt
%no-protection
Key-Type: eddsa
Key-Curve: ed25519
Subkey-Type: ecdh
Subkey-Curve: cv25519
Name-Real: pass
Name-Email: pass@localhost
Expire-Date: 0
%commit
#+end_src

*** Generating
#+begin_src bash :results none
gpg --batch --generate-key gpg-batch.txt
#+end_src

#+RESULTS:

*** Retrieving the Generated Key
#+name: key_id
#+begin_src bash
gpg --list-keys --with-colons pass@localhost | awk -F: '/^pub/ {print $5; exit}'
#+end_src

#+RESULTS: key_id
: 8CA82212EC57873B

*** Initialize =pass= with the Generated Key
#+begin_src bash :var key_id=key_id :results pp
pass init "$key_id"
#+end_src

#+RESULTS:
: mkdir: created directory '/home/user/.password-store/'
: Password store initialized for 8CA82212EC57873B
